### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.SubscriptionClient.from_connection_string
  - azure.servicebus.aio.SubscriptionClient.from_entity
  class: azure.servicebus.aio.SubscriptionClient
  example:
  - "Create a SubscriptionClient.<!--[!code-python[Main](ples\\async_examples\\test_examples_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\
    \\0\\\\azure-servicebus\\\\examples\\\\async_examples\\\\test_examples_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n  \
    \ from azure.servicebus.aio import SubscriptionClient\n\n   connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   subscription_client = SubscriptionClient.from_connection_string(connection_str,\
    \ name=\"MySubscription\", topic=\"MyTopic\")\n   properties = subscription_client.get_properties()\n\
    \n   ````\n"
  fullName: azure.servicebus.aio.SubscriptionClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.aio.async_client.ReceiveClientMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.servicebus.common.mixins.BaseClient
    type: azure.servicebus.aio.async_client.BaseClient
  langs:
  - python
  module: azure.servicebus.aio
  name: SubscriptionClient
  source:
    id: SubscriptionClient
    path: azure-servicebus\azure\servicebus\aio\async_client.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_client.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 732
  summary: 'The SubscriptionClient class defines a high level interface for receiving

    messages to an Azure Service Bus Subscription.

    If you do not wish to perform management operations, a SubscriptionClient can
    be

    instantiated directly to perform receive operations from a Subscription.



    '
  syntax:
    content: SubscriptionClient(address, name, *, shared_access_key_name=None, shared_access_key_value=None,
      loop=None, debug=False, **kwargs)
    parameters:
    - description: 'The full URI of the Service Bus namespace. This can optionally

        include URL-encoded access name and key.

        '
      id: address
      type:
      - str
    - description: 'The name of the topic to which the Client will connect.

        '
      id: name
      type:
      - str
    - description: 'The name of the shared access policy. This must be supplied

        if not encoded into the address.

        '
      id: shared_access_key_name
      type:
      - str
    - description: 'The shared access key. This must be supplied if not encoded

        into the address.

        '
      id: shared_access_key_value
      type:
      - str
    - description: 'An async event loop

        '
      id: loop
      type:
      - asyncio.EventLoop
    - description: 'Whether to output network trace logs to the logger. Default is
        *False*.

        '
      id: debug
      type:
      - bool
  type: class
  uid: azure.servicebus.aio.SubscriptionClient
- class: azure.servicebus.aio.SubscriptionClient
  fullName: azure.servicebus.aio.SubscriptionClient.from_connection_string
  langs:
  - python
  module: azure.servicebus.aio
  name: from_connection_string(conn_str, name, topic=None, **kwargs)
  source:
    id: from_connection_string
    path: azure-servicebus\azure\servicebus\aio\async_client.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_client.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 775
  summary: 'Create a SubscriptionClient from a connection string.

    '
  syntax:
    content: from_connection_string(conn_str, name, topic=None, **kwargs)
    parameters:
    - description: 'The connection string.

        '
      id: conn_str
      type:
      - str
    - description: 'The name of the Subscription.

        '
      id: name
      type:
      - str
    - description: 'The name of the Topic, if the EntityName is

        not included in the connection string.

        '
      id: topic
      type:
      - str
    - defaultValue: None
      id: topic
  type: method
  uid: azure.servicebus.aio.SubscriptionClient.from_connection_string
- class: azure.servicebus.aio.SubscriptionClient
  fullName: azure.servicebus.aio.SubscriptionClient.from_entity
  langs:
  - python
  module: azure.servicebus.aio
  name: from_entity(address, topic, entity, **kwargs)
  source:
    id: from_entity
    path: azure-servicebus\azure\servicebus\aio\async_client.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_client.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 794
  syntax:
    content: from_entity(address, topic, entity, **kwargs)
    parameters:
    - id: cls
    - id: address
    - id: topic
    - id: entity
  type: method
  uid: azure.servicebus.aio.SubscriptionClient.from_entity
references:
- fullName: azure.servicebus.aio.SubscriptionClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, name, topic=None, **kwargs)
  parent: azure.servicebus.aio.SubscriptionClient
  uid: azure.servicebus.aio.SubscriptionClient.from_connection_string
- fullName: azure.servicebus.aio.SubscriptionClient.from_entity
  isExternal: false
  name: from_entity(address, topic, entity, **kwargs)
  parent: azure.servicebus.aio.SubscriptionClient
  uid: azure.servicebus.aio.SubscriptionClient.from_entity
