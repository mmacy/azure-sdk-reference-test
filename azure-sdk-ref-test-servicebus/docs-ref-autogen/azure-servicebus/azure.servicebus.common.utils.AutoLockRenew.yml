### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.common.utils.AutoLockRenew.register
  - azure.servicebus.common.utils.AutoLockRenew.shutdown
  class: azure.servicebus.common.utils.AutoLockRenew
  example:
  - "Automatically renew a message lock<!--[!code-python[Main](ples\\test_examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\
    \\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   for azure.servicebus import AutoLockRenew\n\n  \
    \ lock_renewal = AutoLockRenew(max_workers=4)\n   with queue_client.get_receiver(idle_timeout=3)\
    \ as queue_receiver:\n       for message in queue_receiver:\n           # Auto\
    \ renew message for 1 minute.\n           lock_renewal.register(message, timeout=60)\n\
    \           process_message(message)\n\n           message.complete()\n\n   ````\n\
    \nAutomatically renew a session lock<!--[!code-python[Main](ples\\test_examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\
    \\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   for azure.servicebus import AutoLockRenew\n\n  \
    \ lock_renewal = AutoLockRenew(max_workers=4)\n   with session_client.get_receiver(session=\"\
    MySessionID\", idle_timeout=3) as session:\n       # Auto renew session lock for\
    \ 2 minutes\n       lock_renewal.register(session, timeout=120)\n\n       for\
    \ message in queue_receiver:\n           process_message(message)\n          \
    \ message.complete()\n\n   ````\n"
  fullName: azure.servicebus.common.utils.AutoLockRenew
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.common.utils
  name: AutoLockRenew
  source:
    id: AutoLockRenew
    path: azure-servicebus\azure\servicebus\common\utils.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\utils.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 85
  summary: 'Auto renew locks for messages and sessions using a background thread pool.



    '
  syntax:
    content: AutoLockRenew(executor=None, max_workers=None)
    parameters:
    - description: 'A user-specified thread pool. This cannot be combined with

        setting *max_workers*.

        '
      id: executor
      type:
      - concurrent.futures.ThreadPoolExecutor
    - description: 'Specifiy the maximum workers in the thread pool. If not

        specified the number used will be derived from the core count of the environment.

        This cannot be combined with *executor*.

        '
      id: max_workers
      type:
      - int
  type: class
  uid: azure.servicebus.common.utils.AutoLockRenew
- class: azure.servicebus.common.utils.AutoLockRenew
  fullName: azure.servicebus.common.utils.AutoLockRenew.register
  langs:
  - python
  module: azure.servicebus.common.utils
  name: register(renewable, timeout=300)
  source:
    id: register
    path: azure-servicebus\azure\servicebus\common\utils.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\utils.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 154
  summary: 'Register a renewable entity for automatic lock renewal.

    '
  syntax:
    content: register(renewable, timeout=300)
    parameters:
    - description: 'A locked entity that needs to be renewed.

        '
      id: renewable
      type:
      - azure.servicebus.common.message.Message
      - azure.servicebus.receive_handler.SessionReceiver
    - defaultValue: '300'
      description: 'A time in seconds that the lock should be maintained for.

        Default value is 300 (5 minutes).

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.servicebus.common.utils.AutoLockRenew.register
- class: azure.servicebus.common.utils.AutoLockRenew
  fullName: azure.servicebus.common.utils.AutoLockRenew.shutdown
  langs:
  - python
  module: azure.servicebus.common.utils
  name: shutdown(wait=True)
  source:
    id: shutdown
    path: azure-servicebus\azure\servicebus\common\utils.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\utils.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 167
  summary: 'Shutdown the thread pool to clean up any remaining lock renewal threads.

    '
  syntax:
    content: shutdown(wait=True)
    parameters:
    - defaultValue: 'True'
      description: 'Whether to block until thread pool has shutdown. Default is *True*.

        '
      id: wait
      type:
      - bool
  type: method
  uid: azure.servicebus.common.utils.AutoLockRenew.shutdown
references:
- fullName: azure.servicebus.common.utils.AutoLockRenew.register
  isExternal: false
  name: register(renewable, timeout=300)
  parent: azure.servicebus.common.utils.AutoLockRenew
  uid: azure.servicebus.common.utils.AutoLockRenew.register
- fullName: azure.servicebus.common.utils.AutoLockRenew.shutdown
  isExternal: false
  name: shutdown(wait=True)
  parent: azure.servicebus.common.utils.AutoLockRenew
  uid: azure.servicebus.common.utils.AutoLockRenew.shutdown
