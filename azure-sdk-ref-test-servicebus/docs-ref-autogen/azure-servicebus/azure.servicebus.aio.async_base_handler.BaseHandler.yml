### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.async_base_handler.BaseHandler.close
  - azure.servicebus.aio.async_base_handler.BaseHandler.open
  - azure.servicebus.aio.async_base_handler.BaseHandler.reconnect
  class: azure.servicebus.aio.async_base_handler.BaseHandler
  fullName: azure.servicebus.aio.async_base_handler.BaseHandler
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.aio.async_base_handler
  name: BaseHandler
  source:
    id: BaseHandler
    path: azure-servicebus\azure\servicebus\aio\async_base_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_base_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 28
  summary: '


    '
  syntax:
    content: BaseHandler(endpoint, auth_config, *, loop=None, connection=None, encoding='UTF-8',
      debug=False, **kwargs)
  type: class
  uid: azure.servicebus.aio.async_base_handler.BaseHandler
- class: azure.servicebus.aio.async_base_handler.BaseHandler
  example:
  - "Explicitly open and close a Sender.<!--[!code-python[Main](ples\\async_examples\\\
    test_examples_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\":\
    \ [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\async_examples\\\
    \\test_examples_async.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   from azure.servicebus.aio import Message\n\n   sender = queue_client.get_sender()\n\
    \   try:\n       await sender.open()\n       await sender.send(Message(\"foobar\"\
    ))\n   finally:\n       await sender.close()\n\n   ````\n"
  fullName: azure.servicebus.aio.async_base_handler.BaseHandler.close
  langs:
  - python
  module: azure.servicebus.aio.async_base_handler
  name: close(exception=None)
  source:
    id: close
    path: azure-servicebus\azure\servicebus\aio\async_base_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_base_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 171
  summary: 'Close down the handler connection.


    If the handler has already closed,

    this operation will do nothing. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.

    It is recommended to open a handler within a context manager as

    opposed to calling the method directly.



    > [!NOTE]

    > This operation is not thread-safe.

    >

    '
  syntax:
    content: close(exception=None)
    parameters:
    - defaultValue: None
      description: 'An optional exception if the handler is closing

        due to an error.

        '
      id: exception
      type:
      - Exception
  type: method
  uid: azure.servicebus.aio.async_base_handler.BaseHandler.close
- class: azure.servicebus.aio.async_base_handler.BaseHandler
  example:
  - "Explicitly open and close a Sender.<!--[!code-python[Main](ples\\async_examples\\\
    test_examples_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\":\
    \ [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\async_examples\\\
    \\test_examples_async.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   from azure.servicebus.aio import Message\n\n   sender = queue_client.get_sender()\n\
    \   try:\n       await sender.open()\n       await sender.send(Message(\"foobar\"\
    ))\n   finally:\n       await sender.close()\n\n   ````\n"
  fullName: azure.servicebus.aio.async_base_handler.BaseHandler.open
  langs:
  - python
  module: azure.servicebus.aio.async_base_handler
  name: open()
  source:
    id: open
    path: azure-servicebus\azure\servicebus\aio\async_base_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_base_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 138
  summary: 'Open handler connection and authenticate session.


    If the handler is already open, this operation will do nothing.

    A handler opened with this method must be explicitly closed.

    It is recommended to open a handler within a context manager as

    opposed to calling the method directly.



    > [!NOTE]

    > This operation is not thread-safe.

    >

    '
  syntax:
    content: open()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_base_handler.BaseHandler.open
- class: azure.servicebus.aio.async_base_handler.BaseHandler
  fullName: azure.servicebus.aio.async_base_handler.BaseHandler.reconnect
  langs:
  - python
  module: azure.servicebus.aio.async_base_handler
  name: reconnect()
  source:
    id: reconnect
    path: azure-servicebus\azure\servicebus\aio\async_base_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_base_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 127
  summary: 'Reconnect the handler.


    If the handler was disconnected from the service with

    a retryable error - attempt to reconnect.

    This method will be called automatically for most retryable errors.

    '
  syntax:
    content: reconnect()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_base_handler.BaseHandler.reconnect
references:
- fullName: azure.servicebus.aio.async_base_handler.BaseHandler.close
  isExternal: false
  name: close(exception=None)
  parent: azure.servicebus.aio.async_base_handler.BaseHandler
  uid: azure.servicebus.aio.async_base_handler.BaseHandler.close
- fullName: azure.servicebus.aio.async_base_handler.BaseHandler.open
  isExternal: false
  name: open()
  parent: azure.servicebus.aio.async_base_handler.BaseHandler
  uid: azure.servicebus.aio.async_base_handler.BaseHandler.open
- fullName: azure.servicebus.aio.async_base_handler.BaseHandler.reconnect
  isExternal: false
  name: reconnect()
  parent: azure.servicebus.aio.async_base_handler.BaseHandler
  uid: azure.servicebus.aio.async_base_handler.BaseHandler.reconnect
