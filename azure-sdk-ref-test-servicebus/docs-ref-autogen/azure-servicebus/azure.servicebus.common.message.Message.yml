### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.common.message.Message.abandon
  - azure.servicebus.common.message.Message.annotations
  - azure.servicebus.common.message.Message.body
  - azure.servicebus.common.message.Message.complete
  - azure.servicebus.common.message.Message.dead_letter
  - azure.servicebus.common.message.Message.defer
  - azure.servicebus.common.message.Message.renew_lock
  - azure.servicebus.common.message.Message.schedule
  - azure.servicebus.common.message.Message.settled
  - azure.servicebus.common.message.Message.user_properties
  class: azure.servicebus.common.message.Message
  example:
  - "Sending a message with additional properties<!--[!code-python[Main](ples\\test_examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\
    \\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   message = Message(\"Hello World!\")\n   message.session_id\
    \ = \"MySessionID\"\n   message.partition_key = \"UsingSpecificPartition\"\n \
    \  message.user_properties = {'data': 'custom_data'}\n   message.time_to_live\
    \ = datetime.timedelta(seconds=30)\n\n   queue_client.send(message)\n\n   ````\n\
    \nChecking the properties on a received message<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   with queue_client.get_receiver(idle_timeout=3)\
    \ as receiver:\n       for message in receiver:\n           print(\"Receiving:\
    \ {}\".format(message))\n           print(\"Time to live: {}\".format(message.time_to_live))\n\
    \           print(\"Sequence number: {}\".format(message.sequence_number))\n \
    \          print(\"Enqueue Sequence numger: {}\".format(message.enqueue_sequence_number))\n\
    \           print(\"Partition ID: {}\".format(message.partition_id))\n       \
    \    print(\"Partition Key: {}\".format(message.partition_key))\n           print(\"\
    User Properties: {}\".format(message.user_properties))\n           print(\"Annotations:\
    \ {}\".format(message.annotations))\n           print(\"Delivery count: {}\".format(message.header.delivery_count))\n\
    \           print(\"Message ID: {}\".format(message.properties.message_id))\n\
    \           print(\"Locked until: {}\".format(message.locked_until))\n       \
    \    print(\"Lock Token: {}\".format(message.lock_token))\n           print(\"\
    Enqueued time: {}\".format(message.enqueued_time))\n\n   ````\n"
  fullName: azure.servicebus.common.message.Message
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.common.message
  name: Message
  source:
    id: Message
    path: azure-servicebus\azure\servicebus\common\message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 21
  summary: 'A Service Bus Message.























    '
  syntax:
    content: Message(body, encoding='UTF-8', **kwargs)
    parameters:
    - description: 'The data to send in a single message. The maximum size per message
        is 256 kB.

        '
      id: body
      type:
      - str
      - bytes
    - description: 'The encoding for string data. Default is UTF-8.

        '
      id: encoding
      type:
      - str
  type: class
  uid: azure.servicebus.common.message.Message
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.abandon
  langs:
  - python
  module: azure.servicebus.common.message
  name: abandon()
  source:
    id: abandon
    path: azure-servicebus\azure\servicebus\common\message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 344
  summary: 'Abandon the message.


    This message will be returned to the queue to be reprocessed.

    '
  syntax:
    content: abandon()
    parameters: []
  type: method
  uid: azure.servicebus.common.message.Message.abandon
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.annotations
  langs:
  - python
  module: azure.servicebus.common.message
  name: annotations
  source:
    id: annotations
    path: null
    remote:
      branch: servicebus
      path: null
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: null
  summary: 'The annotations of the message.

    '
  syntax:
    return:
      type:
      - dict
  type: attribute
  uid: azure.servicebus.common.message.Message.annotations
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.body
  langs:
  - python
  module: azure.servicebus.common.message
  name: body
  source:
    id: body
    path: null
    remote:
      branch: servicebus
      path: null
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: null
  summary: 'The body of the Message.

    '
  syntax:
    return:
      type:
      - bytes
      - generator[bytes]
  type: attribute
  uid: azure.servicebus.common.message.Message.body
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.complete
  langs:
  - python
  module: azure.servicebus.common.message
  name: complete()
  source:
    id: complete
    path: azure-servicebus\azure\servicebus\common\message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 306
  summary: 'Complete the message.


    This removes the message from the queue.

    '
  syntax:
    content: complete()
    parameters: []
  type: method
  uid: azure.servicebus.common.message.Message.complete
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.dead_letter
  langs:
  - python
  module: azure.servicebus.common.message
  name: dead_letter(description=None)
  source:
    id: dead_letter
    path: azure-servicebus\azure\servicebus\common\message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 322
  summary: 'Move the message to the Dead Letter queue.


    The Dead Letter queue is a sub-queue that can be

    used to store messages that failed to process correctly, or otherwise require
    further inspection

    or processing. The queue can also be configured to send expired messages to the
    Dead Letter queue.

    To receive dead-lettered messages, use *QueueClient.get_deadletter_receiver()*
    or

    *SubscriptionClient.get_deadletter_receiver()*.

    '
  syntax:
    content: dead_letter(description=None)
    parameters:
    - defaultValue: None
      description: 'The reason for dead-lettering the message.

        '
      id: description
      type:
      - str
  type: method
  uid: azure.servicebus.common.message.Message.dead_letter
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.defer
  langs:
  - python
  module: azure.servicebus.common.message
  name: defer()
  source:
    id: defer
    path: azure-servicebus\azure\servicebus\common\message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 360
  summary: 'Defer the message.


    This message will remain in the queue but must be received

    specifically by its sequence number in order to be processed.

    '
  syntax:
    content: defer()
    parameters: []
  type: method
  uid: azure.servicebus.common.message.Message.defer
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.renew_lock
  langs:
  - python
  module: azure.servicebus.common.message
  name: renew_lock()
  source:
    id: renew_lock
    path: azure-servicebus\azure\servicebus\common\message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 286
  summary: 'Renew the message lock.


    This will maintain the lock on the message to ensure

    it is not returned to the queue to be reprocessed. In order to complete (or otherwise
    settle)

    the message, the lock must be maintained. Messages received via ReceiveAndDelete
    mode are not

    locked, and therefore cannot be renewed. This operation can also be performed
    as a threaded

    background task by registering the message with an *azure.servicebus.AutoLockRenew*
    instance.

    This operation is only available for non-sessionful messages.

    '
  syntax:
    content: renew_lock()
    parameters: []
  type: method
  uid: azure.servicebus.common.message.Message.renew_lock
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.schedule
  langs:
  - python
  module: azure.servicebus.common.message
  name: schedule(schedule_time)
  source:
    id: schedule
    path: azure-servicebus\azure\servicebus\common\message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\common\message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 274
  summary: 'Add a specific enqueue time to the message.

    '
  syntax:
    content: schedule(schedule_time)
    parameters:
    - description: 'The scheduled time to enqueue the message.

        '
      id: schedule_time
      type:
      - datetime.datetime
  type: method
  uid: azure.servicebus.common.message.Message.schedule
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.settled
  langs:
  - python
  module: azure.servicebus.common.message
  name: settled
  source:
    id: settled
    path: null
    remote:
      branch: servicebus
      path: null
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: null
  summary: 'Whether the message has been settled.


    This will aways be *True* for a message received using ReceiveAndDelete mode,

    otherwise it will be *False* until the message is completed or otherwise settled.

    '
  syntax:
    return:
      type:
      - bool
  type: attribute
  uid: azure.servicebus.common.message.Message.settled
- class: azure.servicebus.common.message.Message
  fullName: azure.servicebus.common.message.Message.user_properties
  langs:
  - python
  module: azure.servicebus.common.message
  name: user_properties
  source:
    id: user_properties
    path: null
    remote:
      branch: servicebus
      path: null
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: null
  summary: 'User defined properties on the message.

    '
  syntax:
    return:
      type:
      - dict
  type: attribute
  uid: azure.servicebus.common.message.Message.user_properties
references:
- fullName: azure.servicebus.common.message.Message.abandon
  isExternal: false
  name: abandon()
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.abandon
- fullName: azure.servicebus.common.message.Message.annotations
  isExternal: false
  name: annotations
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.annotations
- fullName: azure.servicebus.common.message.Message.body
  isExternal: false
  name: body
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.body
- fullName: azure.servicebus.common.message.Message.complete
  isExternal: false
  name: complete()
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.complete
- fullName: azure.servicebus.common.message.Message.dead_letter
  isExternal: false
  name: dead_letter(description=None)
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.dead_letter
- fullName: azure.servicebus.common.message.Message.defer
  isExternal: false
  name: defer()
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.defer
- fullName: azure.servicebus.common.message.Message.renew_lock
  isExternal: false
  name: renew_lock()
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.renew_lock
- fullName: azure.servicebus.common.message.Message.schedule
  isExternal: false
  name: schedule(schedule_time)
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.schedule
- fullName: azure.servicebus.common.message.Message.settled
  isExternal: false
  name: settled
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.settled
- fullName: azure.servicebus.common.message.Message.user_properties
  isExternal: false
  name: user_properties
  parent: azure.servicebus.common.message.Message
  uid: azure.servicebus.common.message.Message.user_properties
- fullName: generator[bytes]
  name: generator[bytes]
  spec.python:
  - fullName: generator
    name: generator
    uid: generator
  - fullName: '['
    name: '['
  - fullName: bytes
    name: bytes
    uid: bytes
  - fullName: ']'
    name: ']'
  uid: generator[bytes]
