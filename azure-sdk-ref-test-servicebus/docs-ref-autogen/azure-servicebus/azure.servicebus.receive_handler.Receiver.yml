### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.receive_handler.Receiver.close
  - azure.servicebus.receive_handler.Receiver.fetch_next
  - azure.servicebus.receive_handler.Receiver.next
  - azure.servicebus.receive_handler.Receiver.open
  - azure.servicebus.receive_handler.Receiver.peek
  - azure.servicebus.receive_handler.Receiver.queue_size
  - azure.servicebus.receive_handler.Receiver.receive_deferred_messages
  class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.base_handler.BaseHandler
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: Receiver
  source:
    id: Receiver
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 40
  summary: 'This receive handler acts as an iterable message stream for retrieving

    messages for a Service Bus entity. It operates a single connetion that must be
    opened and

    closed on completion. The service connection will remain open for the entirety
    of the iterator.

    If you find yourself only partially iterating the message stream, you should run
    the receiver

    in a *with* statement to ensure the connection is closed.

    The Receiver should not be instantiated directly, and should be accessed from
    a *QueueClient* or

    *SubscriptionClient* using the *get_receiver()* method.



    > [!NOTE]

    > This object is not thread-safe.

    >









    '
  syntax:
    content: 'Receiver(handler_id, source, auth_config, connection=None, mode=<ReceiveSettleMode.PeekLock:
      <ReceiverSettleMode.PeekLock: 1>>, encoding=''UTF-8'', debug=False, **kwargs)'
    parameters:
    - description: 'The ID used as the connection name for the Receiver.

        '
      id: handler_id
      type:
      - str
    - description: 'The endpoint from which to receive messages.

        '
      id: source
      type:
      - uamqp.Source
    - description: 'The SASL auth credentials.

        '
      id: auth_config
      type:
      - dict[str, str]
    - description: 'A shared connection [not yet supported].

        '
      id: connection
      type:
      - uamqp.Connection
    - description: 'The receive connection mode. Value must be either PeekLock or
        ReceiveAndDelete.

        '
      id: mode
      type:
      - azure.servicebus.common.constants.ReceiveSettleMode
    - description: 'The encoding used for string properties. Default is ''UTF-8''.

        '
      id: encoding
      type:
      - str
    - description: 'Whether to enable network trace debug logs.

        '
      id: debug
      type:
      - bool
  type: class
  uid: azure.servicebus.receive_handler.Receiver
- class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver.close
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: close(exception=None)
  source:
    id: close
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 316
  summary: "Close handler connection.\n\nClose the connection and shutdown the receiver<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n       receiver = queue_client.get_receiver()\n\
    \       for message in receiver:\n           print(message)\n           break\n\
    \       receiver.close()\n\n   ````\n"
  syntax:
    content: close(exception=None)
    parameters:
    - defaultValue: None
      id: exception
  type: method
  uid: azure.servicebus.receive_handler.Receiver.close
- class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver.fetch_next
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: fetch_next(max_batch_size=None, timeout=None)
  source:
    id: fetch_next
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 334
  summary: "Receive messages from ServiceBus entity.\n\nGet the messages in batch\
    \ from the receiver<!--[!code-python[Main](ples\\test_examples.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\\0\\\\azure-servicebus\\\
    \\examples\\\\test_examples.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   # Receive messages in Batch (specify the amount )\n       messages\
    \ = receiver_client.fetch_next(max_batch_size=15, timeout=1)\n       for m in\
    \ messages:\n           print(m.message)\n\n   ````\n"
  syntax:
    content: fetch_next(max_batch_size=None, timeout=None)
    parameters:
    - defaultValue: None
      description: 'Receive a batch of messages. Batch size will

        be up to the maximum specified, but will return as soon as service

        returns no new messages. If combined with a timeout and no messages are

        retrieve before the time, the result will be empty. If no batch

        size is supplied, the prefetch size will be the maximum.

        '
      id: max_batch_size
      type:
      - int
    - defaultValue: None
      id: timeout
    return:
      description: 'list[~azure.servicebus.Message]

        '
  type: method
  uid: azure.servicebus.receive_handler.Receiver.fetch_next
- class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver.next
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: next()
  source:
    id: next
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 178
  syntax:
    content: next()
    parameters: []
  type: method
  uid: azure.servicebus.receive_handler.Receiver.next
- class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver.open
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: open()
  source:
    id: open
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 287
  summary: "Open handler connection.\n\nOpen the connection to start receiving messages<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n       receiver = queue_client.get_receiver()\n\
    \       for message in receiver:\n           print(message)\n           break\n\
    \       receiver.close()\n\n   ````\n"
  syntax:
    content: open()
    parameters: []
  type: method
  uid: azure.servicebus.receive_handler.Receiver.open
- class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver.peek
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: peek(count=1, start_from=None)
  source:
    id: peek
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 213
  summary: "Browse messages pending in the queue. This operation does not remove\n\
    messages from the queue, nor does it lock them.\n\nLoog at pending messages in\
    \ the queue<!--[!code-python[Main](ples\\test_examples.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\\0\\\\azure-servicebus\\\
    \\examples\\\\test_examples.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   # Peek at specific number of messages\n       receiver_client.peek(count=5)\n\
    \n   ````\n"
  syntax:
    content: peek(count=1, start_from=None)
    parameters:
    - defaultValue: '1'
      description: 'How many message to try and peek.

        '
      id: count
      type:
      - int
    - defaultValue: None
      description: 'An enqueue timestamp from which to peek at messages.

        '
      id: start_from
      type:
      - datetime.datetime
    return:
      description: 'list[~azure.servicebus.common.message.PeekMessage]

        '
  type: method
  uid: azure.servicebus.receive_handler.Receiver.peek
- class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver.queue_size
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: queue_size
  source:
    id: queue_size
    path: null
    remote:
      branch: servicebus
      path: null
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: null
  summary: "The current size of the unprocessed message queue.\n:returns: int\n\n\
    Get the number of unprocessed messages in the queue<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Get the number of unprocessed\
    \ messages in queue\n       num_unprocessed_msgs = receiver.queue_size()\n\n \
    \  ````\n"
  syntax: {}
  type: attribute
  uid: azure.servicebus.receive_handler.Receiver.queue_size
- class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver.receive_deferred_messages
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>)'
  source:
    id: receive_deferred_messages
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 249
  summary: "Receive messages that have previously been deferred.\n\nGet the messages\
    \ which were previously deferred<!--[!code-python[Main](ples\\test_examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\
    \\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   # Receive deferred messages \n   # Provide sequence\
    \ numbers of messages which were deferred.\n       receiver_client.receive_deferred_messages(sequence_numbers=seq_numbers)\n\
    \n   ````\n"
  syntax:
    content: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
      <ReceiverSettleMode.PeekLock: 1>>)'
    parameters:
    - description: 'A list of the sequence numbers of messages that have been

        deferred.

        '
      id: sequence_numbers
      type:
      - list[int]
    - defaultValue: ReceiveSettleMode.PeekLock
      description: 'The receive mode, default value is PeekLock.

        '
      id: mode
      type:
      - azure.servicebus.common.constants.ReceiveSettleMode
    return:
      description: 'list[~azure.servicebus.Message]

        '
  type: method
  uid: azure.servicebus.receive_handler.Receiver.receive_deferred_messages
references:
- fullName: azure.servicebus.receive_handler.Receiver.close
  isExternal: false
  name: close(exception=None)
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.close
- fullName: azure.servicebus.receive_handler.Receiver.fetch_next
  isExternal: false
  name: fetch_next(max_batch_size=None, timeout=None)
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.fetch_next
- fullName: azure.servicebus.receive_handler.Receiver.next
  isExternal: false
  name: next()
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.next
- fullName: azure.servicebus.receive_handler.Receiver.open
  isExternal: false
  name: open()
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.open
- fullName: azure.servicebus.receive_handler.Receiver.peek
  isExternal: false
  name: peek(count=1, start_from=None)
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.peek
- fullName: azure.servicebus.receive_handler.Receiver.queue_size
  isExternal: false
  name: queue_size
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.queue_size
- fullName: azure.servicebus.receive_handler.Receiver.receive_deferred_messages
  isExternal: false
  name: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>)'
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.receive_deferred_messages
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
