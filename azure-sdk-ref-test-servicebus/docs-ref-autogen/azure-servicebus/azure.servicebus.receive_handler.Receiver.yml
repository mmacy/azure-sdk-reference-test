### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.receive_handler.Receiver.close
  - azure.servicebus.receive_handler.Receiver.fetch_next
  - azure.servicebus.receive_handler.Receiver.next
  - azure.servicebus.receive_handler.Receiver.open
  - azure.servicebus.receive_handler.Receiver.peek
  - azure.servicebus.receive_handler.Receiver.queue_size
  - azure.servicebus.receive_handler.Receiver.receive_deferred_messages
  class: azure.servicebus.receive_handler.Receiver
  example:
  - "Get the receiver client from service bus client<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   with queue_client.get_receiver()\
    \ as queue_receiver:\n       messages = queue_receiver.fetch_next(timeout=3)\n\
    \n   ````\n"
  fullName: azure.servicebus.receive_handler.Receiver
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.base_handler.BaseHandler
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: Receiver
  source:
    id: Receiver
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 40
  summary: 'This receive handler acts as an iterable message stream for retrieving

    messages for a Service Bus entity. It operates a single connetion that must be
    opened and

    closed on completion. The service connection will remain open for the entirety
    of the iterator.

    If you find yourself only partially iterating the message stream, you should run
    the receiver

    in a *with* statement to ensure the connection is closed.

    The Receiver should not be instantiated directly, and should be accessed from
    a *QueueClient* or

    *SubscriptionClient* using the *get_receiver()* method.



    > [!NOTE]

    > This object is not thread-safe.

    >









    '
  syntax:
    content: 'Receiver(handler_id, source, auth_config, connection=None, mode=<ReceiveSettleMode.PeekLock:
      <ReceiverSettleMode.PeekLock: 1>>, encoding=''UTF-8'', debug=False, **kwargs)'
    parameters:
    - description: 'The ID used as the connection name for the Receiver.

        '
      id: handler_id
      type:
      - str
    - description: 'The endpoint from which to receive messages.

        '
      id: source
      type:
      - uamqp.Source
    - description: 'The SASL auth credentials.

        '
      id: auth_config
      type:
      - dict[str, str]
    - description: 'A shared connection [not yet supported].

        '
      id: connection
      type:
      - uamqp.Connection
    - description: 'The receive connection mode. Value must be either PeekLock or
        ReceiveAndDelete.

        '
      id: mode
      type:
      - azure.servicebus.common.constants.ReceiveSettleMode
    - description: 'The encoding used for string properties. Default is ''UTF-8''.

        '
      id: encoding
      type:
      - str
    - description: 'Whether to enable network trace debug logs.

        '
      id: debug
      type:
      - bool
  type: class
  uid: azure.servicebus.receive_handler.Receiver
- class: azure.servicebus.receive_handler.Receiver
  example:
  - "Close the connection and shutdown the receiver<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   receiver = queue_client.get_receiver()\n\
    \   for message in receiver:\n       print(message)\n       break\n   receiver.close()\n\
    \n   ````\n"
  fullName: azure.servicebus.receive_handler.Receiver.close
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: close(exception=None)
  source:
    id: close
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 319
  summary: 'Close down the receiver connection. If the receiver has already closed,

    this operation will do nothing. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.

    It is recommended to open a handler within a context manager as

    opposed to calling the method directly.

    The receiver will be implicitly closed on completion of the message iterator,

    however this method will need to be called explicitly if the message iterator
    is not run

    to completion.



    > [!NOTE]

    > This operation is not thread-safe.

    >

    '
  syntax:
    content: close(exception=None)
    parameters:
    - defaultValue: None
      description: 'An optional exception if the handler is closing

        due to an error.

        '
      id: exception
      type:
      - Exception
  type: method
  uid: azure.servicebus.receive_handler.Receiver.close
- class: azure.servicebus.receive_handler.Receiver
  example:
  - "Get the messages in batch from the receiver<!--[!code-python[Main](ples\\test_examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\
    \\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   with queue_client.get_receiver(prefetch=200) as\
    \ queue_receiver:\n       # Receive messages in Batch (specify the amount )\n\
    \       messages = queue_receiver.fetch_next(max_batch_size=15, timeout=1)\n \
    \      for m in messages:\n           print(m.message)\n\n   ````\n"
  fullName: azure.servicebus.receive_handler.Receiver.fetch_next
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: fetch_next(max_batch_size=None, timeout=None)
  source:
    id: fetch_next
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 351
  summary: 'Receive a batch of messages at once. This approach it optimal

    if you wish to process multiple messages simultaneously. Note that the

    number of messages retrieved in a single batch will be dependent on

    whether *prefetch* was set for the receiver. This call will prioritize returning

    quickly over meeting a specified batch size, and so will return as soon as at
    least

    one message is received and there is a gap in incoming messages regardless

    of the specified batch size.

    '
  syntax:
    content: fetch_next(max_batch_size=None, timeout=None)
    parameters:
    - defaultValue: None
      description: 'Maximum number of messages in the batch. Actual number

        returned will depend on prefetch size and incoming stream rate.

        '
      id: max_batch_size
      type:
      - int
    - defaultValue: None
      description: 'The time to wait in seconds for the first message to arrive.

        If no messages arrive, and no timeout is specified, this call will not return

        until the connection is closed. If specified, an no messages arrive within
        the

        timeout period, an empty list will be returned.

        '
      id: timeout
    return:
      type:
      - list[azure.servicebus.common.message.Message]
  type: method
  uid: azure.servicebus.receive_handler.Receiver.fetch_next
- class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver.next
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: next()
  source:
    id: next
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 174
  syntax:
    content: next()
    parameters: []
  type: method
  uid: azure.servicebus.receive_handler.Receiver.next
- class: azure.servicebus.receive_handler.Receiver
  fullName: azure.servicebus.receive_handler.Receiver.open
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: open()
  source:
    id: open
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 289
  summary: 'Open receiver connection and authenticate session.

    If the receiver is already open, this operation will do nothing.

    This method will be called automatically when one starts to iterate

    messages in the receiver, so there should be no need to call it directly.

    A receiver opened with this method must be explicitly closed.

    It is recommended to open a handler within a context manager as

    opposed to calling the method directly.



    > [!NOTE]

    > This operation is not thread-safe.

    >

    '
  syntax:
    content: open()
    parameters: []
  type: method
  uid: azure.servicebus.receive_handler.Receiver.open
- class: azure.servicebus.receive_handler.Receiver
  example:
  - "Look at pending messages in the queue<!--[!code-python[Main](ples\\test_examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\
    \\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   # Peek at specific number of messages\n   with queue_client.get_receiver()\
    \ as receiver:\n       receiver.peek(count=5)\n\n   ````\n"
  fullName: azure.servicebus.receive_handler.Receiver.peek
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: peek(count=1, start_from=None)
  source:
    id: peek
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 210
  summary: 'Browse messages pending in the queue. This operation does not remove

    messages from the queue, nor does it lock them.

    '
  syntax:
    content: peek(count=1, start_from=None)
    parameters:
    - defaultValue: '1'
      description: 'The maximum number of messages to try and peek. The default

        value is 1.

        '
      id: count
      type:
      - int
    - defaultValue: None
      description: 'A message sequence number from which to start browsing messages.

        '
      id: start_from
      type:
      - int
    return:
      type:
      - list[azure.servicebus.common.message.PeekMessage]
  type: method
  uid: azure.servicebus.receive_handler.Receiver.peek
- class: azure.servicebus.receive_handler.Receiver
  example:
  - "Get the number of unprocessed messages in the queue<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Get the number of unprocessed\
    \ messages in queue\n   num_unprocessed_msgs = receiver.queue_size\n\n   ````\n"
  fullName: azure.servicebus.receive_handler.Receiver.queue_size
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: queue_size
  source:
    id: queue_size
    path: null
    remote:
      branch: servicebus
      path: null
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: null
  summary: 'The current size of the unprocessed message queue.

    :rtype: int

    '
  syntax: {}
  type: attribute
  uid: azure.servicebus.receive_handler.Receiver.queue_size
- class: azure.servicebus.receive_handler.Receiver
  example:
  - "Get the messages which were previously deferred<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   seq_numbers = []\n   with queue_client.get_receiver(idle_timeout=3)\
    \ as queue_receiver:\n       for message in queue_receiver:\n           seq_numbers.append(message.sequence_number)\n\
    \           message.defer()\n\n   # Receive deferred messages - provide sequence\
    \ numbers of\n   # messages which were deferred.\n   with queue_client.get_receiver()\
    \ as queue_receiver:\n       deferred = queue_receiver.receive_deferred_messages(sequence_numbers=seq_numbers)\n\
    \n   ````\n"
  fullName: azure.servicebus.receive_handler.Receiver.receive_deferred_messages
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>)'
  source:
    id: receive_deferred_messages
    path: azure-servicebus\azure\servicebus\receive_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\receive_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 248
  summary: 'Receive messages that have previously been deferred.

    When receiving deferred messages from a partitioned entity, all of the supplied

    sequence numbers must be messages from the same partition.

    '
  syntax:
    content: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
      <ReceiverSettleMode.PeekLock: 1>>)'
    parameters:
    - description: 'A list of the sequence numbers of messages that have been

        deferred.

        '
      id: sequence_numbers
      type:
      - list[int]
    - defaultValue: ReceiveSettleMode.PeekLock
      description: 'The receive mode, default value is PeekLock.

        '
      id: mode
      type:
      - azure.servicebus.common.constants.ReceiveSettleMode
    return:
      type:
      - list[azure.servicebus.common.message.DeferredMessage]
  type: method
  uid: azure.servicebus.receive_handler.Receiver.receive_deferred_messages
references:
- fullName: azure.servicebus.receive_handler.Receiver.close
  isExternal: false
  name: close(exception=None)
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.close
- fullName: azure.servicebus.receive_handler.Receiver.fetch_next
  isExternal: false
  name: fetch_next(max_batch_size=None, timeout=None)
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.fetch_next
- fullName: azure.servicebus.receive_handler.Receiver.next
  isExternal: false
  name: next()
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.next
- fullName: azure.servicebus.receive_handler.Receiver.open
  isExternal: false
  name: open()
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.open
- fullName: azure.servicebus.receive_handler.Receiver.peek
  isExternal: false
  name: peek(count=1, start_from=None)
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.peek
- fullName: azure.servicebus.receive_handler.Receiver.queue_size
  isExternal: false
  name: queue_size
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.queue_size
- fullName: azure.servicebus.receive_handler.Receiver.receive_deferred_messages
  isExternal: false
  name: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>)'
  parent: azure.servicebus.receive_handler.Receiver
  uid: azure.servicebus.receive_handler.Receiver.receive_deferred_messages
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: list[azure.servicebus.common.message.Message]
  name: list[Message]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.common.message.Message
    name: Message
    uid: azure.servicebus.common.message.Message
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.common.message.Message]
- fullName: list[azure.servicebus.common.message.PeekMessage]
  name: list[PeekMessage]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.common.message.PeekMessage
    name: PeekMessage
    uid: azure.servicebus.common.message.PeekMessage
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.common.message.PeekMessage]
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
- fullName: list[azure.servicebus.common.message.DeferredMessage]
  name: list[DeferredMessage]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.common.message.DeferredMessage
    name: DeferredMessage
    uid: azure.servicebus.common.message.DeferredMessage
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.common.message.DeferredMessage]
