### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.async_message.Message.abandon
  - azure.servicebus.aio.async_message.Message.complete
  - azure.servicebus.aio.async_message.Message.dead_letter
  - azure.servicebus.aio.async_message.Message.defer
  - azure.servicebus.aio.async_message.Message.renew_lock
  class: azure.servicebus.aio.async_message.Message
  example:
  - "Sending a message with additional properties<!--[!code-python[Main](ples\\test_examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\
    \\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   message = Message(\"Hello World!\")\n   message.session_id\
    \ = \"MySessionID\"\n   message.partition_key = \"UsingSpecificPartition\"\n \
    \  message.user_properties = {'data': 'custom_data'}\n   message.time_to_live\
    \ = datetime.timedelta(seconds=30)\n\n   queue_client.send(message)\n\n   ````\n\
    \nChecking the properties on a received message<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   with queue_client.get_receiver()\
    \ as receiver:\n       for message in receiver:\n           print(\"Receiving:\
    \ {}\".format(message))\n           print(\"Time to live: {}\".format(message.time_to_live))\n\
    \           print(\"Sequence number: {}\".format(message.sequence_number))\n \
    \          print(\"Enqueue Sequence numger: {}\".format(message.enqueue_sequence_number))\n\
    \           print(\"Partition ID: {}\".format(message.partition_id))\n       \
    \    print(\"Partition Key: {}\".format(message.partition_key))\n           print(\"\
    User Properties: {}\".format(message.user_properties))\n           print(\"Annotations:\
    \ {}\".format(message.annotations))\n           print(\"Delivery count: {}\".format(message.header.delivery_count))\n\
    \           print(\"Message ID: {}\".format(message.properties.message_id))\n\
    \           print(\"Locked until: {}\".format(message.locked_until))\n       \
    \    print(\"Lock Token: {}\".format(message.lock_token))\n           print(\"\
    Enqueued time: {}\".format(message.enqueued_time))\n\n   ````\n"
  fullName: azure.servicebus.aio.async_message.Message
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.common.message.Message
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: Message
  source:
    id: Message
    path: azure-servicebus\azure\servicebus\aio\async_message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 16
  summary: 'A Service Bus Message.






    '
  syntax:
    content: Message(body, *, encoding='UTF-8', loop=None, **kwargs)
    parameters:
    - description: 'The data to send in a single message.

        '
      id: body
      type:
      - str
      - bytes
    - description: 'The encoding for string data. Default is UTF-8.

        '
      id: encoding
      type:
      - str
  type: class
  uid: azure.servicebus.aio.async_message.Message
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.abandon
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: abandon()
  source:
    id: abandon
    path: azure-servicebus\azure\servicebus\aio\async_message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 90
  summary: 'Abandon the message. This message will be returned to the queue to be
    reprocessed.

    '
  syntax:
    content: abandon()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_message.Message.abandon
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.complete
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: complete()
  source:
    id: complete
    path: azure-servicebus\azure\servicebus\aio\async_message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 59
  summary: 'Complete the message.

    '
  syntax:
    content: complete()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_message.Message.complete
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.dead_letter
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: dead_letter(description=None)
  source:
    id: dead_letter
    path: azure-servicebus\azure\servicebus\aio\async_message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 73
  summary: 'Move the message to the Dead Letter queue.

    '
  syntax:
    content: dead_letter(description=None)
    parameters:
    - defaultValue: None
      description: 'Additional details.

        '
      id: description
      type:
      - str
  type: method
  uid: azure.servicebus.aio.async_message.Message.dead_letter
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.defer
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: defer()
  source:
    id: defer
    path: azure-servicebus\azure\servicebus\aio\async_message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 105
  summary: 'Defer the message. This message will remain in the queue but must be received

    specifically by its sequence number in order to be processed.

    '
  syntax:
    content: defer()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_message.Message.defer
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.renew_lock
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: renew_lock()
  source:
    id: renew_lock
    path: azure-servicebus\azure\servicebus\aio\async_message.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_message.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 44
  summary: 'Renew the message lock.

    This operation is only available for non-sessionful messages.

    '
  syntax:
    content: renew_lock()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_message.Message.renew_lock
references:
- fullName: azure.servicebus.aio.async_message.Message.abandon
  isExternal: false
  name: abandon()
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.abandon
- fullName: azure.servicebus.aio.async_message.Message.complete
  isExternal: false
  name: complete()
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.complete
- fullName: azure.servicebus.aio.async_message.Message.dead_letter
  isExternal: false
  name: dead_letter(description=None)
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.dead_letter
- fullName: azure.servicebus.aio.async_message.Message.defer
  isExternal: false
  name: defer()
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.defer
- fullName: azure.servicebus.aio.async_message.Message.renew_lock
  isExternal: false
  name: renew_lock()
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.renew_lock
