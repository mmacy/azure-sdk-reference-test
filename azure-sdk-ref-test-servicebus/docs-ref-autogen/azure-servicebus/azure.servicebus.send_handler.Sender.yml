### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.send_handler.Sender.cancel_scheduled_messages
  - azure.servicebus.send_handler.Sender.reconnect
  - azure.servicebus.send_handler.Sender.schedule
  - azure.servicebus.send_handler.Sender.send
  - azure.servicebus.send_handler.Sender.send_pending_messages
  class: azure.servicebus.send_handler.Sender
  fullName: azure.servicebus.send_handler.Sender
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.base_handler.BaseHandler
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.common.mixins.SenderMixin
  langs:
  - python
  module: azure.servicebus.send_handler
  name: Sender
  source:
    id: Sender
    path: azure-servicebus\azure\servicebus\send_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\send_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 25
  summary: 'Implements a Sender.






    '
  syntax:
    content: Sender(handler_id, target, auth_config, session=None, connection=None,
      encoding='UTF-8', debug=False, **kwargs)
  type: class
  uid: azure.servicebus.send_handler.Sender
- class: azure.servicebus.send_handler.Sender
  fullName: azure.servicebus.send_handler.Sender.cancel_scheduled_messages
  langs:
  - python
  module: azure.servicebus.send_handler
  name: cancel_scheduled_messages(*sequence_numbers)
  source:
    id: cancel_scheduled_messages
    path: azure-servicebus\azure\servicebus\send_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\send_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 117
  summary: 'Cancel one or more messages that have previsouly been scheduled and are

    still pending.

    '
  syntax:
    content: cancel_scheduled_messages(*sequence_numbers)
    parameters:
    - description: 'The seqeuence numbers of the scheduled messages.

        '
      id: sequence_numbers
  type: method
  uid: azure.servicebus.send_handler.Sender.cancel_scheduled_messages
- class: azure.servicebus.send_handler.Sender
  fullName: azure.servicebus.send_handler.Sender.reconnect
  langs:
  - python
  module: azure.servicebus.send_handler
  name: reconnect()
  source:
    id: reconnect
    path: azure-servicebus\azure\servicebus\send_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\send_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 176
  summary: "If the handler was disconnected from the service with\na retryable error\
    \ - attempt to reconnect.\n\nReconnect to the service when connection breaks<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Reconnect to the service, if\
    \ connection error happens.\n       sender.reconnect()\n\n   ````\n"
  syntax:
    content: reconnect()
    parameters: []
  type: method
  uid: azure.servicebus.send_handler.Sender.reconnect
- class: azure.servicebus.send_handler.Sender
  fullName: azure.servicebus.send_handler.Sender.schedule
  langs:
  - python
  module: azure.servicebus.send_handler
  name: schedule(schedule_time, *messages)
  source:
    id: schedule
    path: azure-servicebus\azure\servicebus\send_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\send_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 91
  summary: "Send one or more messages to be enqueued at a specific time.\nReturns\
    \ a list of the sequence numbers of the enqueued messages.\n\nSchedule a message\
    \ to be sent in future<!--[!code-python[Main](ples\\test_examples.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\\0\\\\\
    azure-servicebus\\\\examples\\\\test_examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   # Get the sender - a single open Connection with\
    \ which multiple send operations can be made\n       sender = queue_client.get_sender(session_id)\n\
    \       message = Message(\"Hello World!\")\n       today = datetime.datetime.today()\n\
    \   # Schedule the message 5 days from today\n       sequence_numbers = sender.schedule(today\
    \ + datetime.timedelta(days=5),[message])\n\n   ````\n"
  syntax:
    content: schedule(schedule_time, *messages)
    parameters:
    - description: 'The date and time to enqueue the messages.

        '
      id: schedule_time
      type:
      - datetime.datetime
    - description: 'The messages to schedule.

        '
      id: messages
      type:
      - azure.servicebus.common.message.Message
    return:
      description: 'list[int]

        '
  type: method
  uid: azure.servicebus.send_handler.Sender.schedule
- class: azure.servicebus.send_handler.Sender
  fullName: azure.servicebus.send_handler.Sender.send
  langs:
  - python
  module: azure.servicebus.send_handler
  name: send(message)
  source:
    id: send
    path: azure-servicebus\azure\servicebus\send_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\send_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 63
  summary: "Sends a message and blocks until acknowledgement is\nreceived or operation\
    \ times out.\n\nSend a message and block<!--[!code-python[Main](ples\\test_examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\
    \\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   # Send the message via sender\n       message =\
    \ Message(\"Hello World!\")\n       sender.send(message)\n\n   ````\n"
  syntax:
    content: send(message)
    parameters:
    - description: 'The message to be sent.

        '
      id: message
      type:
      - azure.servicebus.common.message.Message
  type: method
  uid: azure.servicebus.send_handler.Sender.send
- class: azure.servicebus.send_handler.Sender
  fullName: azure.servicebus.send_handler.Sender.send_pending_messages
  langs:
  - python
  module: azure.servicebus.send_handler
  name: send_pending_messages()
  source:
    id: send_pending_messages
    path: azure-servicebus\azure\servicebus\send_handler.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\send_handler.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 141
  summary: "Wait until all transferred events have been sent.\n\nSend the queued messages<!--[!code-python[Main](ples\\\
    test_examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\\
    s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\test_examples.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Send the pending messages\n\
    \       message_send_status = sender.send_pending_messages()\n       i = 0\n \
    \      for status in message_send_status:\n           messageSent = status[0]\n\
    \           if(not(messageSent)):\n               failureReason = status[1].description\n\
    \               print(\"Message at Index {} was not sent. Reason: {}\".format(i,failureReason))\n\
    \n   ````\n"
  syntax:
    content: send_pending_messages()
    parameters: []
    return:
      description: 'A list of the send results of all the pending messages. Each

        send result is a tuple with two values. The first is a boolean, indicating
        *True*

        if the message sent, or *False* if it failed. The second is an error if the
        message

        failed, otherwise it will be *None*.

        '
      type:
      - list[tuple[bool, azure.servicebus.common.errors.MessageSendFailed]]
  type: method
  uid: azure.servicebus.send_handler.Sender.send_pending_messages
references:
- fullName: azure.servicebus.send_handler.Sender.cancel_scheduled_messages
  isExternal: false
  name: cancel_scheduled_messages(*sequence_numbers)
  parent: azure.servicebus.send_handler.Sender
  uid: azure.servicebus.send_handler.Sender.cancel_scheduled_messages
- fullName: azure.servicebus.send_handler.Sender.reconnect
  isExternal: false
  name: reconnect()
  parent: azure.servicebus.send_handler.Sender
  uid: azure.servicebus.send_handler.Sender.reconnect
- fullName: azure.servicebus.send_handler.Sender.schedule
  isExternal: false
  name: schedule(schedule_time, *messages)
  parent: azure.servicebus.send_handler.Sender
  uid: azure.servicebus.send_handler.Sender.schedule
- fullName: azure.servicebus.send_handler.Sender.send
  isExternal: false
  name: send(message)
  parent: azure.servicebus.send_handler.Sender
  uid: azure.servicebus.send_handler.Sender.send
- fullName: azure.servicebus.send_handler.Sender.send_pending_messages
  isExternal: false
  name: send_pending_messages()
  parent: azure.servicebus.send_handler.Sender
  uid: azure.servicebus.send_handler.Sender.send_pending_messages
- fullName: list[tuple[bool, azure.servicebus.common.errors.MessageSendFailed]]
  name: list[tuple[bool, MessageSendFailed]]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: tuple
    name: tuple
    uid: tuple
  - fullName: '['
    name: '['
  - fullName: bool
    name: bool
    uid: bool
  - fullName: ', '
    name: ', '
  - fullName: azure.servicebus.common.errors.MessageSendFailed
    name: MessageSendFailed
    uid: azure.servicebus.common.errors.MessageSendFailed
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: list[tuple[bool, azure.servicebus.common.errors.MessageSendFailed]]
