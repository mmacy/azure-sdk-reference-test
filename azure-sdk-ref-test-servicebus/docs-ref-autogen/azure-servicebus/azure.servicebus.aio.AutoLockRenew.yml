### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.AutoLockRenew.register
  - azure.servicebus.aio.AutoLockRenew.shutdown
  class: azure.servicebus.aio.AutoLockRenew
  example:
  - "Automatically renew a message lock<!--[!code-python[Main](ples\\async_examples\\\
    test_examples_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\":\
    \ [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\async_examples\\\
    \\test_examples_async.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   for azure.servicebus.aio import AutoLockRenew\n\n   lock_renewal = AutoLockRenew()\n\
    \   async with queue_client.get_receiver(idle_timeout=3) as queue_receiver:\n\
    \       async for message in queue_receiver:\n           lock_renewal.register(message)\n\
    \           await process_message(message)\n\n           await message.complete()\n\
    \n   ````\n\nAutomatically renew a session lock<!--[!code-python[Main](ples\\\
    async_examples\\test_examples_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_repo\\\\0\\\\azure-servicebus\\\\examples\\\\\
    async_examples\\\\test_examples_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   for azure.servicebus.aio import AutoLockRenew\n\n   lock_renewal\
    \ = AutoLockRenew()\n   async with session_client.get_receiver(session=\"MySessionID\"\
    , idle_timeout=3) as session:\n       lock_renewal.register(session)\n\n     \
    \  async for message in queue_receiver:\n           await process_message(message)\n\
    \           await message.complete()\n\n   ````\n"
  fullName: azure.servicebus.aio.AutoLockRenew
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.aio
  name: AutoLockRenew
  source:
    id: AutoLockRenew
    path: azure-servicebus\azure\servicebus\aio\async_utils.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_utils.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 18
  summary: 'An asynchronous AutoLockRenew handler for renewing the lock

    tokens of messages and/or sessions in the background.



    '
  syntax:
    content: AutoLockRenew(loop=None)
    parameters:
    - description: 'An async event loop.

        '
      id: loop
      type:
      - asyncio.EventLoop
  type: class
  uid: azure.servicebus.aio.AutoLockRenew
- class: azure.servicebus.aio.AutoLockRenew
  fullName: azure.servicebus.aio.AutoLockRenew.register
  langs:
  - python
  module: azure.servicebus.aio
  name: register(renewable, timeout=300)
  source:
    id: register
    path: azure-servicebus\azure\servicebus\aio\async_utils.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_utils.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 83
  summary: 'Register a renewable entity for automatic lock renewal.

    '
  syntax:
    content: register(renewable, timeout=300)
    parameters:
    - description: 'A locked entity that needs to be renewed.

        '
      id: renewable
      type:
      - azure.servicebus.aio.async_message.Message
      - azure.servicebus.aio.async_receive_handler.SessionReceiver
    - defaultValue: '300'
      description: 'A time in seconds that the lock should be maintained for.

        Default value is 300 (5 minutes).

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.servicebus.aio.AutoLockRenew.register
- class: azure.servicebus.aio.AutoLockRenew
  fullName: azure.servicebus.aio.AutoLockRenew.shutdown
  langs:
  - python
  module: azure.servicebus.aio
  name: shutdown(wait=True)
  source:
    id: shutdown
    path: azure-servicebus\azure\servicebus\aio\async_utils.py
    remote:
      branch: servicebus
      path: azure-servicebus\azure\servicebus\aio\async_utils.py
      repo: https://github.com/annatisch/azure-sdk-for-python
    startLine: 97
  summary: 'Cancel remaining open lock renewal futures.

    '
  syntax:
    content: shutdown(wait=True)
    parameters:
    - defaultValue: 'True'
      description: 'Whether to block until futures are done. Default is *True*.

        '
      id: wait
      type:
      - bool
  type: method
  uid: azure.servicebus.aio.AutoLockRenew.shutdown
references:
- fullName: azure.servicebus.aio.AutoLockRenew.register
  isExternal: false
  name: register(renewable, timeout=300)
  parent: azure.servicebus.aio.AutoLockRenew
  uid: azure.servicebus.aio.AutoLockRenew.register
- fullName: azure.servicebus.aio.AutoLockRenew.shutdown
  isExternal: false
  name: shutdown(wait=True)
  parent: azure.servicebus.aio.AutoLockRenew
  uid: azure.servicebus.aio.AutoLockRenew.shutdown
